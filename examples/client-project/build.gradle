import com.marklogic.flux.api.Flux

buildscript {
  repositories {
    mavenCentral()
    mavenLocal()
  }
  dependencies {
    classpath "com.marklogic:flux-api:1.2.0"
  }
}

plugins {
  id "java"
}

repositories {
  mavenCentral()
  mavenLocal()
}

dependencies {
  implementation "com.marklogic:flux-api:1.2.0"
  implementation "com.marklogic:flux-embedding-model-minilm:1.2.0"
}

tasks.register("runApp", JavaExec) {
  description = "Verify that the example program can be compiled and run with flux-api as a dependency. "
  mainClass = "org.example.App"
  classpath = sourceSets.main.runtimeClasspath
  jvmArgs = [
    // Required when running on Java 17.
    '--add-exports=java.base/sun.nio.ch=ALL-UNNAMED'
  ]
}

tasks.register("runEmbeddingExample", JavaExec) {
  mainClass = "org.example.ImportWithEmbeddings"
  classpath = sourceSets.main.runtimeClasspath
  jvmArgs = [
    // Required when running on Java 17.
    '--add-exports=java.base/sun.nio.ch=ALL-UNNAMED'
  ]
}

tasks.register("runViaCustomTask") {
  description = "Demonstrate how the Flux API can be used via a custom Gradle task. " +
    "Depends on the example application used in the Getting Started guide. " +
    "Requires using Java 11. "
  doLast {
    Flux.importGenericFiles()
      .from("../../flux-cli/src/test/resources/mixed-files")
      .connectionString("flux-example-user:password@localhost:8004")
      .to({
        it.permissionsString("flux-example-role,read,flux-example-role,update")
          .collections("client-files")
      })
      .execute()
  }
}

