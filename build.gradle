subprojects {
  apply plugin: "java-library"

  group = "com.marklogic"

  java {
    // Flux requires Java 11 for all operations besides splitting and embedding, which require Java 17 due to
    // the requirements of the langchain4j dependency.
    toolchain {
      languageVersion = JavaLanguageVersion.of(11)
    }
  }

  repositories {
    mavenCentral()
    mavenLocal()
    maven {
      url "https://bed-artifactory.bedford.progress.com:443/artifactory/ml-maven-snapshots/"
    }
  }

  configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
      if (details.requested.group.startsWith('com.fasterxml.jackson')) {
        details.useVersion '2.15.2'
        details.because 'Need to match the version used by Spark.'
      }
    }
  }

  test {
    useJUnitPlatform()
    testLogging {
      events 'started', 'passed', 'skipped', 'failed'
      exceptionFormat 'full'
    }
    jvmArgs = [
      // Needed for all Java 17 testing.
      "--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED",

      // For Spark's SerializationDebugger when using Java 17. See ReprocessTest for one example of why this is needed.
      "--add-opens", "java.base/sun.security.action=ALL-UNNAMED",

      // Needed by the JDBC tests.
      "--add-opens", "java.base/sun.util.calendar=ALL-UNNAMED",

      // Needed by CustomImportTest
      "--add-opens", "java.base/java.io=ALL-UNNAMED",
      "--add-opens", "java.base/sun.nio.cs=ALL-UNNAMED"
    ]
  }
}

task gettingStartedZip(type: Zip) {
  description = "Creates a zip of the getting-started project that is intended to be included as a downloadable file " +
    "on the GitHub release page."
  from "examples/getting-started"
  exclude "build", ".gradle", "gradle-*.properties", "flux", ".gitignore", "marklogic-flux"
  into "marklogic-flux-getting-started-${version}"
  archiveFileName = "marklogic-flux-getting-started-${version}.zip"
  destinationDirectory = file("build")
}
